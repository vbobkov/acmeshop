<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2013 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Product list template
 *
 * @see Mage_Catalog_Block_Product_List
 */
?>
<?php
	// $_productCollection = $this->getLoadedProductCollection();
	// $_helper = $this->helper('catalog/output');

	/*
	function bestMatch(&$p1, &$p2) {
		if(isset($_GET['q'])) {
			$search_query = $_GET['q'];
		}
		else {
			$search_query = null;
		}

		$p1_score = bestMatchScore($search_query, $p1);
		$p2_score = bestMatchScore($search_query, $p2);
		$score_comparison = getScoreComparison($p1_score, $p2_score);
		// print_r('<pre>');
		// print_r($score_comparison);
		// print_r('</pre>');

		return getScoreComparisonResult($score_comparison);
	}

	function getScoreComparison(&$p1_score, &$p2_score) {
		$score_comparison = array();
		foreach($p1_score as $name => $value) {
			if(is_array($value)) {
				$score_comparison[$name] = getScoreComparison($p1_score[$name], $p2_score[$name]);
			}
			else {
				if($p1_score[$name] > $p2_score[$name]) {
					$score_comparison[$name] = 1;
				}
				else if($p1_score[$name] < $p2_score[$name]) {
					$score_comparison[$name] = -1;
				}
				else {
					$score_comparison[$name] = 0;
				}
			}
		}
		return $score_comparison;
	}

	function getScoreComparisonResult(&$score_comparison) {
		$comparison_result = 0;
		foreach($score_comparison as $name => $value) {
			if($comparison_result != 0) {
				break;
			}
			if(is_array($value)) {
				$comparison_result = getScoreComparisonResult($value);
			}
			else if($value != 0) {
				$comparison_result = $value;
			}
		}
		return $comparison_result;
	}

	function bestMatchScore($search_query, &$product_data) {
		$lowercase_sq = strtolower($search_query);
		$lowercase_name = strtolower($product_data['name']);
		// $lowercase_description = strtolower($product_data['description']);
		// $lowercase_short_description = strtolower($product_data['short_description']);
		$score = array(
			'full_match' => -1 * partialStringMatch($search_query, $lowercase_name),
			// 'description' => partialStringMatch($search_query, $lowercase_description),
			// 'short_description' => partialStringMatch($search_query, $lowercase_short_description),
			'name_segments' => 0,
			// 'name_segments' => array(),
			// 'description_segments' => array(),
			// 'short_description_segments' => array(),
			'entity_id' => $product_data['entity_id']
		);
		foreach(explode(' ', $search_query) as $segment) {
			if(strlen($segment) > 1) {
				$score['name_segments'] -= partialStringMatch($segment, $lowercase_name);
			}
			// $score['name_segments'][] = partialStringMatch($segment, $lowercase_name);
			// $score['description_segments'][] = partialStringMatch($segment, $lowercase_description);
			// $score['short_description_segments'][] = partialStringMatch($segment, $lowercase_short_description);
		}
		return $score;
	}

	function partialStringMatch($needle, $haystack) {
		$characters_matched = 0;
		$j = 0;
		for($i = 0; $i < strlen($haystack); $i++) {
			if($needle[$j] == $haystack[$i]) {
				$j++;
			}
			else {
				if($characters_matched < $j) {
					$characters_matched = $j;
				}
				$j = 0;
			}
		}
		return $characters_matched;
	}
	*/

	function generateProductURL($home_url, $product_title) {
		return $home_url . strtolower(
			preg_replace('/-{2,}/', '-',
				preg_replace('/^-/', '',
					preg_replace('/-$/', '',
						preg_replace('/[^0-9A-Za-z-]/', '-', $product_title)
					)
				)
			)
		) . ".html";
	}

	$home_url = Mage::helper('core/url')->getHomeUrl();
	$match_limit = 1000;
	if(isset($_GET['q'])) {
		$search_query = $_GET['q'];
	}
	else {
		$search_query = null;
	}
	$w = Mage::getSingleton('core/resource')->getConnection('core_write');
	// $get_all_products = $w->query("SELECT entity_id,value FROM catalog_product_entity_varchar WHERE attribute_id = 71")->fetchAll(PDO::FETCH_ASSOC);
	// $get_all_product_descriptions = $w->query("SELECT entity_id,value FROM catalog_product_entity_text WHERE attribute_id IN(72,73)")->fetchAll(PDO::FETCH_ASSOC);
	$get_products = $w->query(
		"SELECT value
		FROM catalog_product_entity_varchar
		WHERE attribute_id = 71 AND value LIKE '%" . $search_query . "%'"
	)->fetchAll(PDO::FETCH_ASSOC);
	// usort($get_products, 'bestMatch');
	// print_r('<pre>');
	// print_r($get_products);
	// print_r($home_url);
	// print_r('</pre>');
?>
<div>Found <?php echo sizeof($get_products) ?> matches<?php if(sizeof($get_products) > $match_limit) { echo ', showing first ' . $match_limit; } ?>.</div>
<div>(Currently, products are only searchable by manufacturer/model.)</div>
<?php for($i = 0; $i < sizeof($get_products); $i++) {
	if($i >= $match_limit) {
		break;
	}
	$product_url = generateProductURL($home_url, $get_products[$i]['value']); ?>
	<ul class="acme-products-grid">
		<li class="acme-item">
			<h2 class="product-name"><a href="<?php echo $product_url; ?>" title="<?php echo $get_products[$i]['value']; ?>" target="_blank"><?php echo $get_products[$i]['value']; ?></a></h2>
		</li>
	</ul>
<?php } ?>


<script type="text/javascript">
	// jQuery(document).ready(function() {
		// jQuery('.toolbar .amount').html('Items <?php echo $start_index + 1; ?> to <?php echo $end_index; ?> of <?php echo $total_results; ?> total');
	// });
</script>