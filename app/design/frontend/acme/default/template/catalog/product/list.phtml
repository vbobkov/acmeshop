<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2013 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Product list template
 *
 * @see Mage_Catalog_Block_Product_List
 */
?>
<?php
	/*
	function bestMatch(&$p1, &$p2) {
		if(isset($_GET['q'])) {
			$search_query = $_GET['q'];
		}
		else {
			$search_query = null;
		}

		$p1_score = bestMatchScore($search_query, $p1);
		$p2_score = bestMatchScore($search_query, $p2);
		$score_comparison = getScoreComparison($p1_score, $p2_score);
		// print_r('<pre>');
		// print_r($score_comparison);
		// print_r('</pre>');

		return getScoreComparisonResult($score_comparison);
	}

	function getScoreComparison(&$p1_score, &$p2_score) {
		$score_comparison = array();
		foreach($p1_score as $name => $value) {
			if(is_array($value)) {
				$score_comparison[$name] = getScoreComparison($p1_score[$name], $p2_score[$name]);
			}
			else {
				if($p1_score[$name] > $p2_score[$name]) {
					$score_comparison[$name] = 1;
				}
				else if($p1_score[$name] < $p2_score[$name]) {
					$score_comparison[$name] = -1;
				}
				else {
					$score_comparison[$name] = 0;
				}
			}
		}
		return $score_comparison;
	}

	function getScoreComparisonResult(&$score_comparison) {
		$comparison_result = 0;
		foreach($score_comparison as $name => $value) {
			if($comparison_result != 0) {
				break;
			}
			if(is_array($value)) {
				$comparison_result = getScoreComparisonResult($value);
			}
			else if($value != 0) {
				$comparison_result = $value;
			}
		}
		return $comparison_result;
	}

	function bestMatchScore($search_query, &$product_data) {
		$lowercase_sq = strtolower($search_query);
		$lowercase_name = strtolower($product_data['name']);
		// $lowercase_description = strtolower($product_data['description']);
		// $lowercase_short_description = strtolower($product_data['short_description']);
		$score = array(
			'full_match' => -1 * partialStringMatch($search_query, $lowercase_name),
			// 'description' => partialStringMatch($search_query, $lowercase_description),
			// 'short_description' => partialStringMatch($search_query, $lowercase_short_description),
			'name_segments' => 0,
			// 'name_segments' => array(),
			// 'description_segments' => array(),
			// 'short_description_segments' => array(),
			'entity_id' => $product_data['entity_id']
		);
		foreach(explode(' ', $search_query) as $segment) {
			if(strlen($segment) > 1) {
				$score['name_segments'] -= partialStringMatch($segment, $lowercase_name);
			}
			// $score['name_segments'][] = partialStringMatch($segment, $lowercase_name);
			// $score['description_segments'][] = partialStringMatch($segment, $lowercase_description);
			// $score['short_description_segments'][] = partialStringMatch($segment, $lowercase_short_description);
		}
		return $score;
	}

	function partialStringMatch($needle, $haystack) {
		$characters_matched = 0;
		$j = 0;
		for($i = 0; $i < strlen($haystack); $i++) {
			if($needle[$j] == $haystack[$i]) {
				$j++;
			}
			else {
				if($characters_matched < $j) {
					$characters_matched = $j;
				}
				$j = 0;
			}
		}
		return $characters_matched;
	}

	if(isset($_GET['limit'])) {
		$products_per_page = $_GET['limit'];
	}
	else {
		$products_per_page = 9;
	}
	if(isset($_GET['p'])) {
		$page_number = $_GET['p'];
	}
	else {
		$page_number = 1;
	}
	$start_index = ($page_number - 1) * $products_per_page;
	$end_index = $start_index + $products_per_page;

    // $_productCollection = $this->getLoadedProductCollection();
	$all_products = array();
	$current_product_ids = array();
	$current_products = array();
    $_helper = $this->helper('catalog/output');

	// $get_all_products = Mage::getModel('catalog/product')
		// ->getCollection()
		// ->addAttributeToSelect('*')
		// ->addAttributeToSelect('name')
		// ->addAttributeToSelect('url_key')
		// ->addAttributeToSelect('description')
		// ->addAttributeToSelect('short_description')
		// ->addAttributeToFilter('entity_id', array('in' => $this->getLoadedProductCollection()->getAllIds()));
	// $get_all_products->getSelect()->order("find_in_set(entity_id,'".implode(',',$productIds)."')");
	// $get_all_products = $this->getLoadedProductCollection();
	// $total_results = $get_all_products->getSize();
	// $get_all_products->clear()->setPageSize($total_results)->load();

	// foreach ($get_all_products as $product_id => $product) {
		// $all_products[] = $product;
	// }
	// $current_product_ids = $all_products;

	// $all_products = array_values($this->getLoadedProductCollection()->getAllIDsAndTitles());
	$all_products = array_values($this->getLoadedProductCollection()->getAllIDsAndTitles(1000, 0));
	// $all_products = array_values($this->getLoadedProductCollection()->getAllIDsAndTitles(5, 0));
	// $all_products = array();

	usort($all_products, 'bestMatch');
	$total_results = sizeof($all_products);
	for($i = $start_index; $i < $end_index; $i++) {
		if($i < sizeof($all_products)) {
			$current_product_ids[] = $all_products[$i]['entity_id'];
		}
	}

	$all_products = null;
	// $get_all_products = null;
	// $current_products->getSelect()->order("find_in_set(entity_id,'".implode(',',$current_product_ids)."')");
	$current_products = Mage::getModel('catalog/product')->getCollection()->addAttributeToSelect('*')->addAttributeToFilter('entity_id', array('in' => $current_product_ids));
	$current_products->clear()->setPageSize($current_products->getSize())->load();
	// $current_products = $this->getLoadedProductCollection();

	$toolbar_html = preg_replace(
		'/\<p class="amount"\>(.*?)\<\/p\>/s',
		'<p class="amount">Items ' . ($start_index + 1) . ' to ' . $end_index . ' of ' . $total_results . ' total</p>',
		$this->getToolbarHtml()
	);

	print_r('<pre>');
	// echo get_class(Mage::getResourceModel('catalog/product_collection')) . '<br />';
	// print_r(sizeof($all_products));
	// print_r($all_products);
	// print_r(partialStringMatch('haxx', 'wtfhacxx????'));
	// print_r(sizeof($get_all_products) . "\n");
	// print_r($get_all_products);
	// print_r(sizeof($current_products) . "\n");
	// print_r($current_products);
	// print_r($current_product_ids);
	// $prev_product = null;
	// foreach($current_products as $_product) {
		// print_r($_product->getData());
		// print_r(bestMatchScore($_GET['q'], $_product->getData()));
		// if($prev_product != null) {
			// print_r(getScoreComparison(bestMatchScore($_GET['q'], $prev_product->getData()), bestMatchScore($_GET['q'], $_product->getData())));
			// print_r(bestMatch($prev_product, $_product));
		// }
		// $prev_product = $_product;
	// }
	// print_r(htmlentities($toolbar_html));
	print_r('</pre>');
	*/



	// $_productCollection = $this->getLoadedProductCollection();
	// $_helper = $this->helper('catalog/output');



	if(isset($_GET['q'])) {
		$search_query = $_GET['q'];
	}
	else {
		$search_query = null;
	}
	// $get_all_products = Mage::getModel('catalog/product')
		// ->getCollection()
		// ->addAttributeToSelect('id')
		// ->addAttributeToSelect('name')
		// ->addAttributeToSelect('description')
		// ->addAttributeToSelect('short_description')
		// ->setPageSize(40000);
	$w = Mage::getSingleton('core/resource')->getConnection('core_write');
	// $get_all_products = $w->query("SELECT entity_id,value FROM catalog_product_entity_varchar WHERE attribute_id = 71")->fetchAll(PDO::FETCH_ASSOC);
	// $get_all_product_descriptions = $w->query("SELECT entity_id,value FROM catalog_product_entity_text WHERE attribute_id IN(72,73)")->fetchAll(PDO::FETCH_ASSOC);
	$get_products = $w->query(
		"SELECT value
		FROM catalog_product_entity_varchar
		WHERE attribute_id = 71 AND value LIKE '%" . $search_query . "%'"
	)->fetchAll(PDO::FETCH_ASSOC);
	print_r('<pre>');
	print_r($get_products);
	// print_r($get_all_products);
	// print_r($get_all_product_descriptions);
	// print_r($get_all_products);
	// print_r($get_all_products->count());
	// foreach($get_all_products as $product) {
		// print_r($product);
	// }
	print_r('</pre>');
?>

<script type="text/javascript">
	// jQuery(document).ready(function() {
		// jQuery('.toolbar .amount').html('Items <?php echo $start_index + 1; ?> to <?php echo $end_index; ?> of <?php echo $total_results; ?> total');
	// });
</script>